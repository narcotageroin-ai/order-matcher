import streamlit as st
import pandas as pd
import os
from io import BytesIO
from openpyxl import load_workbook

st.set_page_config(page_title="Order Matcher", layout="wide")

st.title("üì¶ Order Matcher ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤")

st.write("""
–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–≤–∞ —Ñ–∞–π–ª–∞:
1. –ù–∞—à —Ñ–∞–π–ª –∑–∞–∫–∞–∑–∞ (—Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏/—à—Ç—Ä–∏—Ö–∫–æ–¥–∞–º–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º).
2. –ü—Ä–∞–π—Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞.
""")

file_order = st.file_uploader("–ù–∞—à —Ñ–∞–π–ª –∑–∞–∫–∞–∑–∞", type=["csv","xls","xlsx"])
file_supplier = st.file_uploader("–§–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", type=["csv","xls","xlsx"])

def read_file(file):
    ext = os.path.splitext(file.name)[1].lower()
    if ext == ".csv":
        return pd.read_csv(file), "csv", None
    elif ext in [".xls", ".xlsx"]:
        df = pd.read_excel(file, engine="openpyxl")
        wb = None
        if ext == ".xlsx":
            file.seek(0)
            wb = load_workbook(file)
        return df, ext, wb
    else:
        st.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {ext}")
        return None, None, None

if file_order and file_supplier:
    df_order, order_type, _ = read_file(file_order)
    df_supplier, supplier_type, supplier_wb = read_file(file_supplier)

    if df_order is not None and df_supplier is not None:
        st.success("–§–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ ‚úÖ")

        # –≤—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–æ–≤
        st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è")
        order_keys = st.multiselect("–ö–æ–ª–æ–Ω–∫–∏ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–∞—Ä—Ç–∏–∫—É–ª, —à—Ç—Ä–∏—Ö–∫–æ–¥ –∏ —Ç.–ø.)", df_order.columns.tolist())
        supplier_keys = st.multiselect("–ö–æ–ª–æ–Ω–∫–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞", df_supplier.columns.tolist())

        qty_col_order = st.selectbox("–ö–æ–ª–æ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ –∑–∞–∫–∞–∑–µ", df_order.columns.tolist())
        qty_col_supplier = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ/–ø–æ–∑–∏—Ü–∏—è –∫–æ–ª–æ–Ω–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞")

        overwrite = st.checkbox("–ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")

        if st.button("üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å"):
            found, not_found = 0, 0

            for idx, row in df_order.iterrows():
                qty = row[qty_col_order]
                match = None

                for ok, sk in zip(order_keys, supplier_keys):
                    supplier_match = df_supplier[df_supplier[sk].astype(str) == str(row[ok])]
                    if not supplier_match.empty:
                        match = supplier_match.index[0]
                        break

                if match is not None:
                    if qty_col_supplier in df_supplier.columns:
                        if overwrite or pd.isna(df_supplier.at[match, qty_col_supplier]):
                            df_supplier.at[match, qty_col_supplier] = qty
                    else:
                        try:
                            col_idx = int(qty_col_supplier)
                            if overwrite or pd.isna(df_supplier.iat[match, col_idx]):
                                df_supplier.iat[match, col_idx] = qty
                        except:
                            st.error(f"‚ùå –ö–æ–ª–æ–Ω–∫–∞ {qty_col_supplier} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    found += 1
                else:
                    not_found += 1

            st.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(df_order)} —Å—Ç—Ä–æ–∫. –ù–∞–π–¥–µ–Ω–æ: {found}, –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {not_found}")

            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            out_file = BytesIO()
            if supplier_type == "csv":
                df_supplier.to_csv(out_file, index=False, encoding="utf-8-sig")
                mime="text/csv"
                fname="supplier_updated.csv"
            elif supplier_type in ["xls","xlsx"]:
                df_supplier.to_excel(out_file, index=False, engine="openpyxl")
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                fname="supplier_updated.xlsx"
            else:
                mime="application/octet-stream"
                fname="supplier_updated.dat"

            st.download_button("üíæ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", out_file.getvalue(), file_name=fname, mime=mime)
