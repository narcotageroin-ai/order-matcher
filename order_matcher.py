
import pandas as pd
import streamlit as st
from io import BytesIO
from openpyxl import load_workbook

st.set_page_config(page_title="–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤", page_icon="üì¶", layout="centered")
st.title("üì¶ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º")

# ---------- –£—Ç–∏–ª–∏—Ç—ã ----------
def load_table(file_bytes: bytes, filename: str):
    """–ß–∏—Ç–∞–µ–º –∑–∞–∫–∞–∑/–ø—Ä–∞–π—Å –≤ DataFrame –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞."""
    bio = BytesIO(file_bytes)
    name = filename.lower()
    if name.endswith(('.xlsx', '.xlsm')):
        return pd.read_excel(bio, engine='openpyxl')
    elif name.endswith('.xls'):
        return pd.read_excel(bio, engine='xlrd')
    elif name.endswith('.csv'):
        return pd.read_csv(bio)
    else:
        return None

def normalize_key(v):
    if pd.isna(v):
        return None
    return str(v).strip()

def detect_header_row(ws, headers, max_scan=20):
    """–ò—â–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–∞ –ª–∏—Å—Ç–µ –ø–æ —Å–ø–∏—Å–∫—É –∏–º—ë–Ω —Å—Ç–æ–ª–±—Ü–æ–≤ (–∏–∑ pandas).
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º 1-–±–∞–∑–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî 1.
    """
    headers_set = {str(h) for h in headers if str(h) != 'Unnamed: 0'}
    best_row = 1
    best_hits = 0
    for r in range(1, min(ws.max_row, max_scan) + 1):
        row_vals = [str(c.value) if c.value is not None else '' for c in ws[r]]
        hits = sum(1 for v in row_vals if v in headers_set and v != '')
        if hits > best_hits:
            best_hits = hits
            best_row = r
            if hits >= max(1, len(headers_set) // 2):
                # –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π, —á—Ç–æ–±—ã —Å—á–∏—Ç–∞—Ç—å —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
                pass
    return best_row

def build_col_index_map(ws, header_row):
    """–°—Ç—Ä–æ–∏–º —Å–ª–æ–≤–∞—Ä—å: –ó–∞–≥–æ–ª–æ–≤–æ–∫ -> –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ (1-–±–∞–∑–æ–≤—ã–π)."""
    m = {}
    for idx, cell in enumerate(ws[header_row], start=1):
        if cell.value is not None:
            m[str(cell.value)] = idx
    return m

# ---------- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ ----------
file_order = st.file_uploader('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∑–∞–∫–∞–∑–∞ (Excel/CSV)', type=['xls', 'xlsx', 'xlsm', 'csv'], key='order')
file_supplier = st.file_uploader('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (Excel/CSV)', type=['xls', 'xlsx', 'xlsm', 'csv'], key='supplier')

if file_order and file_supplier:
    order_bytes = file_order.getvalue()
    supplier_bytes = file_supplier.getvalue()

    df_order = load_table(order_bytes, file_order.name)
    df_supplier = load_table(supplier_bytes, file_supplier.name)

    if df_order is None or df_supplier is None:
        st.error('‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .xls, .xlsx, .xlsm –∏–ª–∏ .csv')
        st.stop()

    st.subheader('–ù–∞—à —Ñ–∞–π–ª –∑–∞–∫–∞–∑–∞:')
    st.dataframe(df_order.head())

    st.subheader('–§–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:')
    st.dataframe(df_supplier.head())

    # –í—ã–±–æ—Ä –ª–∏—Å—Ç–∞ (–¥–ª—è .xlsx/.xlsm —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∞)
    preserve_format = file_supplier.name.lower().endswith(('.xlsx', '.xlsm'))
    sheet_name = None
    if preserve_format:
        with st.expander('–î–æ–ø. –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏—Å—Ç–∞'):
            sheet_name = st.text_input('–ò–º—è –ª–∏—Å—Ç–∞ (–µ—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–π)', value='')

    # –ü–æ–ª—è
    order_keys = st.multiselect('üîë –ü–æ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞—à —Ñ–∞–π–ª, –ø–æ –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤)', df_order.columns)
    supplier_keys = st.multiselect('üîç –ü–æ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ (—Ñ–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞, –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ)', df_supplier.columns)
    qty_col = st.selectbox('üì¶ –°—Ç–æ–ª–±–µ—Ü —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º (–Ω–∞—à —Ñ–∞–π–ª)', df_order.columns)
    supplier_qty_col = st.selectbox('‚úèÔ∏è –°—Ç–æ–ª–±–µ—Ü –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (—Ñ–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞)', df_supplier.columns)

    # –ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏
    overwrite_existing = st.checkbox('–ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è', value=False)

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    auto_header = st.checkbox('–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–¥–ª—è .xlsx/.xlsm)', value=True, disabled=not preserve_format)
    manual_header = 1
    if preserve_format and not auto_header:
        manual_header = st.number_input('–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–∞ –ª–∏—Å—Ç–µ (1-–±–∞–∑–æ–≤—ã–π)', min_value=1, value=1, step=1)

    if len(order_keys) != len(supplier_keys):
        st.warning('‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –æ–±–æ–∏—Ö —Ñ–∞–π–ª–∞—Ö.')
        st.stop()

    # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
    if st.button('–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª'):
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π (–ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º)
        dicts = []
        for okey in order_keys:
            d = {}
            for a, q in zip(df_order[okey], df_order[qty_col]):
                na = normalize_key(a)
                if na is not None:
                    d[na] = q
            dicts.append(d)

        total = len(df_supplier)
        stats = {}
        matched = 0

        # –§–æ–ª–ª–±—ç–∫ –∫–∞—Ä—Ç–∞ –ø–æ–∑–∏—Ü–∏–π –∏–∑ DataFrame
        supplier_pos_index_map = {str(col): idx + 1 for idx, col in enumerate(df_supplier.columns)}

        if preserve_format:
            keep_vba = file_supplier.name.lower().endswith('.xlsm')
            wb = load_workbook(BytesIO(supplier_bytes), keep_vba=keep_vba)
            ws = wb[sheet_name] if (sheet_name and sheet_name in wb.sheetnames) else wb.active

            header_row = detect_header_row(ws, df_supplier.columns) if auto_header else manual_header
            col_map = build_col_index_map(ws, header_row)

            fallback_used = []

            def get_col_idx(col_name):
                s = str(col_name)
                if s in col_map:
                    return col_map[s]
                # Fallback –ø–æ –ø–æ–∑–∏—Ü–∏–∏, –µ—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø—É—Å—Ç–æ–π/Unnamed
                if s in supplier_pos_index_map:
                    idx = supplier_pos_index_map[s]
                    if idx <= ws.max_column:
                        fallback_used.append(s)
                        return idx
                return None

            qty_col_idx = get_col_idx(supplier_qty_col)
            key_cols_idx = [get_col_idx(c) for c in supplier_keys]

            missing = [n for n, i in zip(['QTY'] + list(supplier_keys), [qty_col_idx] + key_cols_idx) if i is None]
            if missing:
                st.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ç–æ–ª–±—Ü—ã (–¥–∞–∂–µ –ø–æ –ø–æ–∑–∏—Ü–∏–∏). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–±–æ—Ä: ' + ', '.join(map(str, missing[1:])))
                st.stop()

            if fallback_used:
                st.warning('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–ª–±—Ü—ã –Ω–µ –∏–º–µ–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ Excel –∏ –±—ã–ª–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏: ' + ', '.join(fallback_used))

            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            start_row = header_row + 1
            for r in range(start_row, ws.max_row + 1):
                if not overwrite_existing and ws.cell(row=r, column=qty_col_idx).value is not None:
                    continue

                # –ò—â–µ–º –ø–æ –∫–ª—é—á–∞–º –ø–æ –æ—á–µ—Ä–µ–¥–∏
                assigned = False
                for dict_idx, k_col_idx in enumerate(key_cols_idx, start=1):
                    key_val = normalize_key(ws.cell(row=r, column=k_col_idx).value)
                    if key_val is not None:
                        val = dicts[dict_idx - 1].get(key_val)
                        if val is not None:
                            ws.cell(row=r, column=qty_col_idx).value = val
                            key_name = f"{order_keys[dict_idx-1]} -> {supplier_keys[dict_idx-1]}">
                            stats[key_name] = stats.get(key_name, 0) + 1
                            matched += 1
                            assigned = True
                            break

            not_found = total - matched

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            st.subheader('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏')
            st.write(f'–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: **{total}**')
            for k in stats:
                st.write(f'üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ {k}: **{stats[k]}**')
            st.write(f'‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ: **{not_found}**')

            out = BytesIO()
            wb.save(out)
            st.success('‚úÖ –ì–æ—Ç–æ–≤–æ! –°–∫–∞—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∏–∂–µ.')
            st.download_button(
                '‚¨á –°–∫–∞—á–∞—Ç—å Excel (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∞)',
                data=out.getvalue(),
                file_name='supplier_with_qty.xlsx',
                mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            )

        else:
            # –§–æ–ª–ª–±—ç–∫ —á–µ—Ä–µ–∑ pandas
            df = df_supplier.copy()
            if not overwrite_existing:
                mask = df[supplier_qty_col].isna()
            else:
                mask = pd.Series([True] * len(df))

            for dict_idx, (okey, skey) in enumerate(zip(order_keys, supplier_keys), start=1):
                d = dicts[dict_idx - 1]
                before = df.loc[mask, supplier_qty_col].notna().sum()
                df.loc[mask, supplier_qty_col] = (
                    df.loc[mask, skey].map(lambda x: d.get(normalize_key(x)))
                )
                after = df.loc[mask, supplier_qty_col].notna().sum()
                stats[f'{okey} -> {skey}'] = int(after - before)

            matched = int(df[supplier_qty_col].notna().sum())
            not_found = int(total - matched)

            st.subheader('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏')
            st.write(f'–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: **{total}**')
            for k in stats:
                st.write(f'üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ {k}: **{stats[k]}**')
            st.write(f'‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ: **{not_found}**')

            out = BytesIO()
            df.to_excel(out, index=False, engine='openpyxl')
            st.success('‚úÖ –ì–æ—Ç–æ–≤–æ! –°–∫–∞—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∏–∂–µ.')
            st.download_button(
                '‚¨á –°–∫–∞—á–∞—Ç—å Excel',
                data=out.getvalue(),
                file_name='supplier_with_qty.xlsx',
                mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            )
