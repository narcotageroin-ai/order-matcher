
import os
from io import BytesIO
import pandas as pd
import streamlit as st
from openpyxl import load_workbook

st.set_page_config(page_title="Order Matcher", page_icon="üì¶", layout="centered")
st.title("üì¶ Order Matcher ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è (—Ñ–∏–∫—Å)")

# -------------------- –£–¢–ò–õ–ò–¢–´ --------------------
def normalize_key(x):
    if pd.isna(x):
        return None
    return str(x).strip()

def guess_qty_column(columns):
    patterns = ['–∫–æ–ª-–≤–æ','–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ','qty','quantity','qnt','—à—Ç']
    low = [str(c).strip().lower() for c in columns]
    for p in patterns:
        for i, name in enumerate(low):
            if p in name:
                return columns[i]
    return columns[0] if len(columns) else None

def read_any(uploaded_file):
    """–ß–∏—Ç–∞–µ–º CSV/XLS/XLSX –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º –∏, –¥–ª—è XLSX, –¥–∞—ë–º Workbook –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞."""
    name = uploaded_file.name
    ext = os.path.splitext(name)[1].lower()
    raw = uploaded_file.getvalue()

    if ext == ".csv":
        df = pd.read_csv(BytesIO(raw))
        return df, "csv", raw, None

    if ext == ".xls":
        # —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç Excel ‚Äî —á–∏—Ç–∞–µ–º —á–µ—Ä–µ–∑ xlrd; —Ñ–æ—Ä–º–∞—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è
        df = pd.read_excel(BytesIO(raw), engine="xlrd")
        return df, "xls", raw, None

    if ext in [".xlsx", ".xlsm"]:
        df = pd.read_excel(BytesIO(raw), engine="openpyxl")
        wb = load_workbook(BytesIO(raw), keep_vba=(ext==".xlsm"))
        return df, "xlsx", raw, wb

    st.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {ext}")
    st.stop()

def detect_header_row(ws, pandas_headers, max_scan=30):
    """–ò—â–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–∞ –ª–∏—Å—Ç–µ XLSX, —Å—Ä–∞–≤–Ω–∏–≤–∞—è —Å –∏–º–µ–Ω–∞–º–∏ –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ pandas."""
    good_names = set([str(h) for h in pandas_headers if not str(h).startswith('Unnamed:')])
    best_r, best_hits = 1, -1
    for r in range(1, min(ws.max_row, max_scan)+1):
        vals = [str(c.value) if c.value is not None else '' for c in ws[r]]
        hits = sum(1 for v in vals if v in good_names and v != '')
        if hits > best_hits:
            best_hits, best_r = hits, r
    return best_r

def build_header_map(ws, header_row):
    m = {}
    row = ws[header_row]
    for j, cell in enumerate(row, start=1):
        if cell.value is not None:
            m[str(cell.value)] = j
    return m

# -------------------- UI: –∑–∞–≥—Ä—É–∑–∫–∞ --------------------
file_order = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∑–∞–∫–∞–∑–∞ (CSV / XLS / XLSX)", type=["csv","xls","xlsx","xlsm"], key="order")
file_supplier = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (CSV / XLS / XLSX)", type=["csv","xls","xlsx","xlsm"], key="supplier")

if not (file_order and file_supplier):
    st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±–∞ —Ñ–∞–π–ª–∞, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
    st.stop()

df_order, order_type, order_bytes, order_wb = read_any(file_order)
df_supplier, supplier_type, supplier_bytes, supplier_wb = read_any(file_supplier)

st.subheader("–ù–∞—à —Ñ–∞–π–ª –∑–∞–∫–∞–∑–∞ (–ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏)")
st.dataframe(df_order.head(10))
st.subheader("–§–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (–ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏)")
st.dataframe(df_supplier.head(10))

# -------------------- UI: —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ --------------------
st.markdown("### –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è")
st.caption("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è **–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞** (—Å–Ω–∞—á–∞–ª–∞ –ê—Ä—Ç–∏–∫—É–ª, –∑–∞—Ç–µ–º –®—Ç—Ä–∏—Ö–∫–æ–¥ –∏ —Ç.–¥.)")

order_keys = st.multiselect("üîë –ü–æ–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞—à —Ñ–∞–π–ª)", df_order.columns)
supplier_keys = st.multiselect("üîç –ü–æ–ª—è –ø–æ–∏—Å–∫–∞ (—Ñ–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞)", df_supplier.columns)

if len(order_keys) != len(supplier_keys):
    st.warning("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π –≤ –æ–±–æ–∏—Ö —Ñ–∞–π–ª–∞—Ö.")
    st.stop()

qty_col_order = st.selectbox("üì¶ –ö–æ–ª–æ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–Ω–∞—à —Ñ–∞–π–ª)", df_order.columns, index=max(0, list(df_order.columns).index(guess_qty_column(df_order.columns)) if guess_qty_column(df_order.columns) in df_order.columns else 0))

# –í–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–¥–∞–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
st.markdown("**–ö—É–¥–∞ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞?**")
supplier_qty_mode = st.radio("–°–ø–æ—Å–æ–± –≤—ã–±–æ—Ä–∞", ["–í—ã–±—Ä–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–ª–æ–Ω–∫—É", "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É"], horizontal=True)

new_qty_name = None
if supplier_qty_mode == "–í—ã–±—Ä–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–ª–æ–Ω–∫—É":
    supplier_qty_col = st.selectbox("‚úèÔ∏è –ö–æ–ª–æ–Ω–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", df_supplier.columns)
else:
    default_name = "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"
    new_qty_name = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏", value=default_name)
    supplier_qty_col = new_qty_name

overwrite = st.checkbox("–ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", value=False)

# –î–æ–ø. –æ–ø—Ü–∏–∏
case_insensitive = st.checkbox("–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ (A==a)", value=True)
trim_spaces = st.checkbox("–ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º", value=True)

# -------------------- –ü–û–î–ì–û–¢–û–í–ö–ê –°–õ–û–í–ê–†–ï–ô --------------------
def key_norm(x):
    s = normalize_key(x)
    if s is None:
        return None
    if trim_spaces:
        s = s.strip()
    if case_insensitive:
        s = s.lower()
    return s

dicts = []
for okey in order_keys:
    d = {}
    for a, q in zip(df_order[okey], df_order[qty_col_order]):
        na = key_norm(a)
        if na is not None:
            d[na] = q
    dicts.append(d)

# -------------------- –û–ë–†–ê–ë–û–¢–ö–ê --------------------
if st.button("üöÄ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª"):
    stats = {}
    matched = 0
    total = len(df_supplier)

    # ===== –°—Ü–µ–Ω–∞—Ä–∏–π XLSX: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç —á–µ—Ä–µ–∑ openpyxl =====
    if supplier_type == "xlsx":
        ws = supplier_wb.active
        header_row = detect_header_row(ws, df_supplier.columns)
        col_map = build_header_map(ws, header_row)
        pos_map = {str(c): i+1 for i, c in enumerate(df_supplier.columns)}  # –ø–æ–∑–∏—Ü–∏—è –ø–æ pandas

        # qty-–∫–æ–ª–æ–Ω–∫–∞
        if supplier_qty_col not in df_supplier.columns and supplier_qty_mode == "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É":
            # —Å–æ–∑–¥–∞–¥–∏–º –≤ –∫–æ–Ω—Ü–µ —Ç–∞–±–ª–∏—Ü—ã (—Ç–æ–ª—å–∫–æ –≤ pandas-—Ñ–∞–π–ª–µ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ –∏–Ω–¥–µ–∫—Å–∞)
            df_supplier[supplier_qty_col] = None
            pos_map = {str(c): i+1 for i, c in enumerate(df_supplier.columns)}
            # –≤ —Å–∞–º–æ–º Excel ‚Äî –¥–æ–±–∞–≤–∏–º –Ω–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü —Å–ø—Ä–∞–≤–∞
            insert_idx = ws.max_column + 1
            ws.cell(row=header_row, column=insert_idx).value = supplier_qty_col
            qty_idx = insert_idx
        else:
            qty_idx = col_map.get(str(supplier_qty_col))
            if qty_idx is None:
                # fallback –ø–æ –ø–æ–∑–∏—Ü–∏–∏ (–¥–ª—è Unnamed)
                qty_idx = pos_map.get(str(supplier_qty_col))

        key_idxs = []
        fallback_used = []
        for skey in supplier_keys:
            idx = col_map.get(str(skey))
            if idx is None:
                idx = pos_map.get(str(skey))
                if idx is not None:
                    fallback_used.append(str(skey))
            key_idxs.append(idx)

        if any(i is None for i in [qty_idx] + key_idxs):
            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–ª–±—Ü—ã (–¥–∞–∂–µ –ø–æ –ø–æ–∑–∏—Ü–∏–∏). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–±–æ—Ä.")
            st.stop()

        if fallback_used:
            st.warning("‚ö†Ô∏è –°—Ç–æ–ª–±—Ü—ã –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏: " + ", ".join(fallback_used))

        start_row = header_row + 1
        for r in range(start_row, ws.max_row + 1):
            # –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–ø—É—Å—Ç—ã–µ
            if not overwrite and ws.cell(row=r, column=qty_idx).value is not None:
                continue

            placed = False
            for d_idx, k_idx in enumerate(key_idxs, start=1):
                val = key_norm(ws.cell(row=r, column=k_idx).value)
                if val is None:
                    continue
                q = dicts[d_idx - 1].get(val)
                if q is not None:
                    ws.cell(row=r, column=qty_idx).value = q
                    key_name = f"{order_keys[d_idx-1]} -> {supplier_keys[d_idx-1]}"
                    stats[key_name] = stats.get(key_name, 0) + 1
                    matched += 1
                    placed = True
                    break

        not_found = total - matched

        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        st.write(f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: **{total}**")
        for k, v in stats.items():
            st.write(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ {k}: **{v}**")
        st.write(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ: **{not_found}**")

        out = BytesIO()
        supplier_wb.save(out)
        st.success("‚úÖ –ì–æ—Ç–æ–≤–æ! –°–∫–∞—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
        st.download_button("‚¨á –°–∫–∞—á–∞—Ç—å XLSX (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è)",
            data=out.getvalue(),
            file_name="supplier_with_qty.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")

    # ===== CSV / XLS: —á–µ—Ä–µ–∑ pandas =====
    else:
        df = df_supplier.copy()

        if supplier_qty_col not in df.columns and supplier_qty_mode == "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–ª–æ–Ω–∫—É":
            df[supplier_qty_col] = None

        if supplier_qty_col not in df.columns:
            st.error("‚ùå –£–∫–∞–∂–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–ª–æ–Ω–∫—É –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é.")
            st.stop()

        # –º–∞—Å–∫–∞ –¥–ª—è –Ω–µ–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º)
        if overwrite:
            editable_mask = pd.Series([True] * len(df))
        else:
            editable_mask = df[supplier_qty_col].isna() if supplier_qty_col in df.columns else pd.Series([True]*len(df))

        # –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º –∫–ª—é—á–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ)
        for d_idx, (okey, skey) in enumerate(zip(order_keys, supplier_keys), start=1):
            d = dicts[d_idx - 1]
            # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è supplier –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
            supplier_norm = df[skey].map(key_norm)
            before = df.loc[editable_mask, supplier_qty_col].notna().sum()
            df.loc[editable_mask, supplier_qty_col] = df.loc[editable_mask, skey].map(lambda x: d.get(key_norm(x)))
            after = df.loc[editable_mask, supplier_qty_col].notna().sum()
            stats[f"{okey} -> {skey}"] = int(after - before)

        matched = int(df[supplier_qty_col].notna().sum())
        not_found = int(len(df) - matched)

        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        st.write(f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: **{len(df)}**")
        for k, v in stats.items():
            st.write(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ {k}: **{v}**")
        st.write(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ: **{not_found}**")

        out = BytesIO()
        if supplier_type == "csv":
            df.to_csv(out, index=False, encoding="utf-8-sig")
            fname = "supplier_with_qty.csv"
            mime = "text/csv"
        else:
            # .xls —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ .xlsx (–Ω–∞–¥—ë–∂–Ω–µ–µ)
            df.to_excel(out, index=False, engine="openpyxl")
            fname = "supplier_with_qty.xlsx"
            mime = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"

        st.success("‚úÖ –ì–æ—Ç–æ–≤–æ! –°–∫–∞—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.")
        st.download_button("‚¨á –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç", data=out.getvalue(), file_name=fname, mime=mime)
