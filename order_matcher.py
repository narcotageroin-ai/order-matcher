
import pandas as pd
import streamlit as st
from io import BytesIO
from openpyxl import load_workbook

st.set_page_config(page_title="–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤", page_icon="üì¶", layout="centered")
st.title("üì¶ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º")

# ---------- –£—Ç–∏–ª–∏—Ç—ã ----------
def load_table(file_bytes: bytes, filename: str):
    """–ß–∏—Ç–∞–µ–º –∑–∞–∫–∞–∑/–ø—Ä–∞–π—Å –≤ DataFrame –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞."""
    bio = BytesIO(file_bytes)
    if filename.lower().endswith(".xlsx") or filename.lower().endswith(".xlsm"):
        return pd.read_excel(bio, engine="openpyxl")
    elif filename.lower().endswith(".xls"):
        return pd.read_excel(bio, engine="xlrd")
    elif filename.lower().endswith(".csv"):
        return pd.read_csv(bio)
    else:
        return None

def normalize_key(v):
    if pd.isna(v):
        return None
    return str(v).strip()

def detect_header_row(ws, headers, max_scan=20):
    """–ò—â–µ–º —Å—Ç—Ä–æ–∫—É –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–∞ –ª–∏—Å—Ç–µ –ø–æ —Å–ø–∏—Å–∫—É –∏–º—ë–Ω —Å—Ç–æ–ª–±—Ü–æ–≤ (–∏–∑ pandas).
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º 1-–±–∞–∑–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî 1.
    """
    headers_set = {str(h) for h in headers}
    best_row = 1
    best_hits = 0
    for r in range(1, min(ws.max_row, max_scan) + 1):
        row_vals = [str(c.value) if c.value is not None else "" for c in ws[r]]
        hits = sum(1 for v in row_vals if v in headers_set)
        if hits > best_hits:
            best_hits = hits
            best_row = r
            if hits == len(headers_set):
                break
    return best_row

def build_col_index_map(ws, header_row):
    """–°—Ç—Ä–æ–∏–º —Å–ª–æ–≤–∞—Ä—å: –ó–∞–≥–æ–ª–æ–≤–æ–∫ -> –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ (1-–±–∞–∑–æ–≤—ã–π)."""
    m = {}
    for idx, cell in enumerate(ws[header_row], start=1):
        if cell.value is not None:
            m[str(cell.value)] = idx
    return m

# ---------- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ ----------
file_order = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –∑–∞–∫–∞–∑–∞ (Excel/CSV)", type=["xls", "xlsx", "xlsm", "csv"], key="order")
file_supplier = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ (Excel/CSV)", type=["xls", "xlsx", "xlsm", "csv"], key="supplier")

if file_order and file_supplier:
    order_bytes = file_order.getvalue()
    supplier_bytes = file_supplier.getvalue()

    df_order = load_table(order_bytes, file_order.name)
    df_supplier = load_table(supplier_bytes, file_supplier.name)

    if df_order is None or df_supplier is None:
        st.error("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .xls, .xlsx, .xlsm –∏–ª–∏ .csv")
        st.stop()

    st.subheader("–ù–∞—à —Ñ–∞–π–ª –∑–∞–∫–∞–∑–∞:")
    st.dataframe(df_order.head())

    st.subheader("–§–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:")
    st.dataframe(df_supplier.head())

    # –í—ã–±–æ—Ä –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª—é—á–µ–π –∏ —Å—Ç–æ–ª–±—Ü–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    order_keys = st.multiselect("üîë –ü–æ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞—à —Ñ–∞–π–ª, –ø–æ –æ—á–µ—Ä–µ–¥–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤)", df_order.columns)
    supplier_keys = st.multiselect("üîç –ü–æ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞ (—Ñ–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞, –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ)", df_supplier.columns)
    qty_col = st.selectbox("üì¶ –°—Ç–æ–ª–±–µ—Ü —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º (–Ω–∞—à —Ñ–∞–π–ª)", df_order.columns)
    supplier_qty_col = st.selectbox("‚úèÔ∏è –°—Ç–æ–ª–±–µ—Ü –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (—Ñ–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞)", df_supplier.columns)

    preserve_format = file_supplier.name.lower().endswith((".xlsx", ".xlsm"))
    if not preserve_format:
        st.info("‚ÑπÔ∏è –§–∞–π–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlsx/.xlsm ‚Äî —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ.")

    auto_header = st.checkbox("–ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–¥–ª—è .xlsx/.xlsm)", value=True, disabled=not preserve_format)
    manual_header = 1
    if preserve_format and not auto_header:
        manual_header = st.number_input("–ù–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–∞ –ª–∏—Å—Ç–µ (1-–±–∞–∑–æ–≤—ã–π)", min_value=1, value=1, step=1)

    if len(order_keys) != len(supplier_keys):
        st.warning("‚ö†Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –æ–±–æ–∏—Ö —Ñ–∞–π–ª–∞—Ö.")
        st.stop()

    # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
    if st.button("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª"):
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ª–æ–≤–∞—Ä–µ–π –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
        dicts = []
        for okey in order_keys:
            d = {}
            for a, q in zip(df_order[okey], df_order[qty_col]):
                na = normalize_key(a)
                if na is not None:
                    d[na] = q
            dicts.append(d)

        total = len(df_supplier)
        stats = {}
        matched = 0

        if preserve_format:
            # –†–∞–±–æ—Ç–∞–µ–º —á–µ—Ä–µ–∑ openpyxl, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π –≤–∏–¥
            wb = load_workbook(BytesIO(supplier_bytes))
            ws = wb.active  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç

            header_row = detect_header_row(ws, df_supplier.columns) if auto_header else manual_header
            col_map = build_col_index_map(ws, header_row)

            # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∏–º–µ–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤ —Ä–µ–∞–ª—å–Ω–æ –µ—Å—Ç—å –≤ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            missing = [c for c in [*supplier_keys, supplier_qty_col] if str(c) not in col_map]
            if missing:
                st.error("‚ùå –≠—Ç–∏ —Å—Ç–æ–ª–±—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ –ª–∏—Å—Ç–µ (–≤ —Å—Ç—Ä–æ–∫–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤): " + ", ".join(map(str, missing)))
                st.stop()

            qty_col_idx = col_map[str(supplier_qty_col)]
            key_cols_idx = [col_map[str(c)] for c in supplier_keys]

            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Å—Ç—Ä–æ–∫–∞–º –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            for r in range(header_row + 1, ws.max_row + 1):
                # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–ª–æ–Ω–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                if ws.cell(row=r, column=qty_col_idx).value is not None:
                    continue

                # –ò—â–µ–º –ø–æ –ø–æ—Ä—è–¥–∫—É –∫–ª—é—á–µ–π
                found_here = False
                for dict_idx, k_col_idx in enumerate(key_cols_idx, start=1):
                    key_val = normalize_key(ws.cell(row=r, column=k_col_idx).value)
                    if key_val is not None and key_val in dicts[dict_idx - 1]:
                        ws.cell(row=r, column=qty_col_idx).value = dicts[dict_idx - 1][key_val]
                        stats[f"–ù–∞–π–¥–µ–Ω–æ –ø–æ –∫–ª—é—á—É {dict_idx} ({order_keys[dict_idx-1]} -> {supplier_keys[dict_idx-1]})"] =                                 stats.get(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ –∫–ª—é—á—É {dict_idx} ({order_keys[dict_idx-1]} -> {supplier_keys[dict_idx-1]})", 0) + 1
                        matched += 1
                        found_here = True
                        break

            not_found = total - matched

            # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            st.write(f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: **{total}**")
            for k in sorted(stats.keys()):
                st.write(f"üîç {k}: **{stats[k]}**")
            st.write(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ: **{not_found}**")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
            out = BytesIO()
            wb.save(out)
            st.success("‚úÖ –ì–æ—Ç–æ–≤–æ! –°–∫–∞—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∏–∂–µ.")
            st.download_button(
                "‚¨á –°–∫–∞—á–∞—Ç—å Excel (—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∞)",
                data=out.getvalue(),
                file_name="supplier_with_qty.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            )

        else:
            # –§–æ–ª–ª–±—ç–∫ —á–µ—Ä–µ–∑ pandas (—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è)
            df = df_supplier.copy()
            df[supplier_qty_col] = None

            for dict_idx, (okey, skey) in enumerate(zip(order_keys, supplier_keys), start=1):
                d = dicts[dict_idx - 1]
                before = df[supplier_qty_col].notna().sum()
                df.loc[df[supplier_qty_col].isna(), supplier_qty_col] = (
                    df.loc[df[supplier_qty_col].isna(), skey].map(lambda x: d.get(normalize_key(x)))
                )
                after = df[supplier_qty_col].notna().sum()
                stats[f"–ù–∞–π–¥–µ–Ω–æ –ø–æ –∫–ª—é—á—É {dict_idx} ({okey} -> {skey})"] = int(after - before)

            matched = int(df[supplier_qty_col].notna().sum())
            not_found = int(total - matched)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            st.write(f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ —É –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: **{total}**")
            for k in sorted(stats.keys()):
                st.write(f"üîç {k}: **{stats[k]}**")
            st.write(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ: **{not_found}**")

            out = BytesIO()
            df.to_excel(out, index=False, engine="openpyxl")
            st.success("‚úÖ –ì–æ—Ç–æ–≤–æ! –°–∫–∞—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∏–∂–µ.")
            st.download_button(
                "‚¨á –°–∫–∞—á–∞—Ç—å Excel",
                data=out.getvalue(),
                file_name="supplier_with_qty.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            )
